import boto3
import base64
import anthropic
import os
import json
import re

def get_classification_prompt(company_name):
    """Create classification prompt with payroll document detection"""
    
    # Generate company name variations for better matching
    company_variations = generate_company_variations(company_name)
    
    return f"""You are a highly accurate document classification AI assistant. Perform strict OCR analysis on the uploaded document and extract key information in the specified JSON format.

**CRITICAL OUTPUT REQUIREMENT:**
Your response must contain ONLY valid JSON. No explanations, comments, or markdown.
Start directly with {{{{ and end with }}}}.

**USER'S COMPANY:** "{company_name}"

**COMPANY NAME MATCHING:**
Match ANY of these variations:
{company_variations}

═══════════════════════════════════════════════════════════════════════════════
**D. INVOICE / BILL DETERMINATION**
═══════════════════════════════════════════════════════════════════════════════

If the document is NOT payroll, share document, or bank statement, then it's either an INVOICE or BILL.
The distinction depends on WHO issued it and WHO must pay.

**STEP D1: EXTRACT DOCUMENT STRUCTURE**
CLASSIFICATION ALGORITHM - FOLLOW EXACTLY IN THIS ORDER
═══════════════════════════════════════════════════════════════════════════════

**STEP 1: DOCUMENT TYPE IDENTIFICATION**

Analyze the document structure carefully and identify which type it belongs to. Each document type has SPECIFIC characteristics that must ALL be present.

═══════════════════════════════════════════════════════════════════════════════
**A. PAYROLL DOCUMENT CHECK**
═══════════════════════════════════════════════════════════════════════════════

A document is PAYROLL if it shows employee salary/wage information for the company's own employees.

**MANDATORY PAYROLL CHARACTERISTICS (need 5+ to confirm):**

1. ✓ Document title explicitly contains: "PAYROLL", "PAYROLL ANALYSIS", "PAYROLL REPORT", "SALARY REGISTER", "WAGE SHEET", "PAYSLIP", "EMPLOYEE COMPENSATION"

2. ✓ Document is FOR the company ({company_name}), not TO the company
   - Header shows: "PAYROLL ANALYSIS REPORT FOR COMPANY: {company_name}"
   - NOT "INVOICE TO: {company_name}" from an external vendor

3. ✓ Contains employee-specific fields:
   - Employee ID/Code (e.g., U8003, EMP001, etc.)
   - Employee Name
   - Department/Designation

4. ✓ Period/Month specified (payroll cycle):
   - "202506 - JUNE", "PERIOD: JUNE 2025", "Month: June"
   - Payroll period dates

5. ✓ Salary/Earnings breakdown columns present (3+ of these):
   - SALARY, BASE PAY, GROSS PAY, BASIC SALARY
   - BONUS, OVERTIME, ALLOWANCES
   - TRAVELING, ANNUAL LEAVE PAY

6. ✓ Deductions breakdown columns present (2+ of these):
   - DEDUCTIONS, ADVANCES, LOAN REPAYMENT
   - INCOME TAX, TDS, TAX DEDUCTED
   - PROVIDENT FUND (PF), ESI, SOCIAL INSURANCE
   - PROFESSIONAL TAX, CESS

7. ✓ Net pay or total earnings calculation:
   - NET PAY, TAKE HOME, TOTAL EARNINGS
   - Total after deductions

8. ✓ Company cost/employer contributions mentioned:
   - EMPLOYER PF, EMPLOYER ESI
   - COMPANY COST, TOTAL COMPANY COST
   - Employer contributions

9. ✓ Structured in salary calculation format:
   - Shows: Earnings + Additions - Deductions = Net Pay
   - OR: Gross columns → Deduction columns → Net columns

10. ✓ Internal document characteristics:
    - Generated BY the company for their own records
    - Not a bill/invoice FROM an external party
    - Footer may show internal payroll software (e.g., "INPayroll ©Soft Limited")

**CRITICAL: Payroll vs HR Vendor Invoice Distinction**

PAYROLL (internal document):
- Header: "PAYROLL REPORT FOR {company_name}"
- Shows: Individual employee breakdowns
- Purpose: Company's own salary processing
- Issued BY: {company_name}'s internal HR/payroll system
→ Classification: payroll + money_going_out

HR VENDOR INVOICE (external bill):
- Header: "INVOICE FROM: XYZ HR Services Pvt Ltd"
- TO/BILL TO: {company_name}
- Shows: Service charges for payroll processing
- Purpose: Vendor charging for their services
- Bank account: Vendor's account for payment
→ Classification: bill + money_going_out

**PAYROLL DECISION:**
- If 5+ indicators match → document_type = "payroll", category = "money_going_out"
- If fewer indicators → Continue to check other document types

═══════════════════════════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════════════════════════
**B. SHARE DOCUMENT CHECK**
═══════════════════════════════════════════════════════════════════════════════

A document is SHARE_DOCUMENT if it relates to company ownership, equity, or stock.

**MANDATORY SHARE DOCUMENT CHARACTERISTICS (need 3+ to confirm):**

1. ✓ Document title contains:
   - "SHARE CERTIFICATE", "STOCK CERTIFICATE"
   - "EQUITY ALLOCATION", "ESOP GRANT"
   - "SHAREHOLDER AGREEMENT", "SHAREHOLDING PATTERN"
   - "DIVIDEND DECLARATION", "DIVIDEND WARRANT"

2. ✓ Contains equity-specific terms:
   - Number of shares
   - Share class (equity, preference, common stock)
   - Share price or valuation
   - Shareholder name

3. ✓ Legal/regulatory markers:
   - Certificate number
   - Company registration details
   - Board resolution references
   - Distinctive numbers of shares

4. ✓ Ownership transfer or allocation language:
   - "Hereby certifies that..."
   - "Entitled to ... shares"
   - "Transfer of shares"

**SHARE DOCUMENT DECISION:**
- If 3+ indicators match → document_type = "share_document", category = "money_coming_in"
- If fewer indicators → Continue to check other document types

═══════════════════════════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════════════════════════
**C. BANK STATEMENT CHECK**
═══════════════════════════════════════════════════════════════════════════════

A document is BANK_STATEMENT if it shows banking transactions for an account.

**MANDATORY BANK STATEMENT CHARACTERISTICS (need 4+ to confirm):**

1. ✓ Document title contains:
   - "BANK STATEMENT", "ACCOUNT STATEMENT"
   - "STATEMENT OF ACCOUNT", "TRANSACTION HISTORY"

2. ✓ Bank branding and details:
   - Bank name and logo in header
   - Branch name/code
   - IFSC code or SWIFT code

3. ✓ Account information:
   - Account number
   - Account holder name
   - Account type (savings, current, etc.)

4. ✓ Transaction listing:
   - Date column for transactions
   - Debit/Credit or Withdrawal/Deposit columns
   - Running balance column
   - Transaction descriptions/references

5. ✓ Statement period:
   - "From [date] To [date]"
   - Opening balance and closing balance

6. ✓ Bank contact information:
   - Bank's registered address
   - Customer service numbers

**BANK STATEMENT DECISION:**
- If 4+ indicators match → document_type = "bank_statement", category = "bank_statement"
- If fewer indicators → Continue to check invoice/bill characteristics

You MUST identify these fields from the document:

A. **DOCUMENT ISSUER** (Who created/sent this document?)
   Look at the TOP/HEADER area for:
   - Company name in largest text at top
   - Logo position (top left/center)
   - Fields: "FROM:", "VENDOR:", "SELLER:", "ISSUED BY:"
   - GST/Tax number in header area
   - Contact details at top (phone/email/address)
   
   Write down: **ISSUER = [Company Name]**

B. **DOCUMENT RECIPIENT** (Who receives/must pay this document?)
   Look in the BODY/MIDDLE area for:
   - Fields: "TO:", "BILL TO:", "CUSTOMER:", "CLIENT:", "BUYER:", "RECEIVER:", "SOLD TO:"
   - Company name appearing AFTER header section
   - Labeled as purchaser/client/customer
   
   Write down: **RECIPIENT = [Company Name]**

C. **BANK ACCOUNT OWNER** (Whose account for payment?)
   Look at BOTTOM area for:
   - "Pay to:", "Remit to:", "Bank details:", "Account holder:"
   - Bank account name
   
   Write down: **BANK ACCOUNT BELONGS TO = [Company Name]**

═══════════════════════════════════════════════════════════════════════════════

**STEP D2: APPLY THE ABSOLUTE CLASSIFICATION RULES**

🚨🚨🚨 **THE FUNDAMENTAL RULE - READ THIS CAREFULLY** 🚨🚨🚨

**FROM THE USER'S COMPANY PERSPECTIVE:**

A document is an **INVOICE** when:
- The user's company ({company_name}) ISSUED/CREATED the document
- The user's company is REQUESTING payment FROM a customer
- The user's company will RECEIVE money
- The user's company appears as the SELLER/VENDOR/SERVICE PROVIDER

A document is a **BILL** when:
- Another company ISSUED/CREATED the document
- The user's company RECEIVED the document
- The user's company must PAY money TO the vendor
- The user's company appears as the BUYER/CUSTOMER/CLIENT

**SIMPLE TEST:** "Who issued this document?"
- {company_name} issued it → INVOICE (money_coming_in)
- Another company issued it → BILL (money_going_out)

═══════════════════════════════════════════════════════════════════════════════

🚨 **RULE A: WHO IS THE CUSTOMER/RECIPIENT? (CHECK THIS FIRST)**

Is "{company_name}" mentioned in ANY of these fields?
- "TO:", "BILL TO:", "CUSTOMER:", "CLIENT:", "BUYER:", "RECEIVER:", "SOLD TO:", "SHIP TO:"

✓ **YES** → {company_name} is the CUSTOMER receiving the document
   → Another company issued this document TO {company_name}
   → From {company_name}'s perspective: This is a BILL they must pay
   
   **MANDATORY OUTPUT:**
   - document_type = "bill"
   - category = "money_going_out"
   - reasoning = "{company_name} appears in CUSTOMER/RECEIVER/TO field. They are receiving this document from a vendor and must pay. This is a BILL from their perspective."
   
   **STOP HERE. DO NOT CONTINUE TO OTHER RULES.**

✗ **NO** → Continue to Rule B

---

🚨 **RULE B: WHO IS THE ISSUER/VENDOR? (CHECK THIS SECOND)**

Is "{company_name}" in the HEADER/TOP section AS THE ISSUER?
- Company name at top of page (largest text)
- Next to logo in header
- In "FROM:", "VENDOR:", "SELLER:" fields
- GST/Tax number at top belongs to them

✓ **YES** → {company_name} is the ISSUER of this document
   → AND another company appears in TO:/CUSTOMER: field?
   → From {company_name}'s perspective: This is an INVOICE they issued to collect payment
   
   **MANDATORY OUTPUT:**
   - document_type = "invoice"
   - category = "money_coming_in"
   - reasoning = "{company_name} issued this document to [customer name]. They are requesting payment. This is an INVOICE from their perspective."
   
   **STOP HERE.**

✗ **NO** → Continue to Rule C

---

🚨 **RULE C: BANK ACCOUNT RULE**

Whose bank account is listed for payment?

✓ Bank account belongs to "{company_name}"
   → Output: document_type = "invoice", category = "money_coming_in"
   
✓ Bank account belongs to ANOTHER company
   → Output: document_type = "bill", category = "money_going_out"

✗ No clear bank account or unclear → Continue to Rule D

---

🚨 **RULE D: PAYMENT LOGIC TEST**

Based on ALL the information, answer this question:
**"In this transaction, will {company_name} SEND money or RECEIVE money?"**

- If {company_name} will **SEND/PAY** money → document_type = "bill", category = "money_going_out"
- If {company_name} will **RECEIVE/GET PAID** money → document_type = "invoice", category = "money_coming_in"
- Cannot determine → document_type = null, category = "illegible_document"

═══════════════════════════════════════════════════════════════════════════════

**STEP 2: CRITICAL VALIDATION BEFORE OUTPUT**

Before generating JSON, verify:

✓ If payroll indicators present (4+) → MUST be payroll + money_going_out
✓ If "{company_name}" is in TO:/CUSTOMER:/RECEIVER: field → MUST be bill + money_going_out
✓ If "{company_name}" is in FROM:/VENDOR:/header → MUST be invoice + money_coming_in
✓ Document type and category must match:
  - payroll → money_going_out
  - invoice → money_coming_in
  - bill → money_going_out
  - share_document → money_coming_in

❌ **FORBIDDEN COMBINATIONS:**
- "{company_name}" in CUSTOMER field + document_type="invoice" → WRONG! Must be "bill"
- "{company_name}" in CUSTOMER field + category="money_coming_in" → WRONG! Must be "money_going_out"
- document_type="bill" + category="money_coming_in" → WRONG!
- document_type="invoice" + category="money_going_out" → WRONG!
- document_type="payroll" + category="money_coming_in" → WRONG!

═══════════════════════════════════════════════════════════════════════════════

**DOCUMENT TYPES:**
- "payroll": Payroll report with 2+ employees (money_going_out)
- "share_document": Share/stock/equity docs (always money_coming_in)
- "invoice": User issued it, requesting payment (money_coming_in)
- "bill": User received it, must pay vendor (money_going_out)
- "bank_statement": Bank statement
- null: Illegible only

**CATEGORIES:**
- "money_coming_in": User receives money
- "money_going_out": User pays money (bills, payroll, expenses)
- "bank_statement": Bank statement
- "illegible_document": Cannot determine

**REQUIRED JSON OUTPUT:**
{{{{
  "document_type": "payroll|invoice|bill|bank_statement|share_document|null",
  "category": "money_coming_in|money_going_out|bank_statement|illegible_document",
  "company_name": "{company_name}",
  "total_amount": 1250.00,
  "confidence_score": 0.95,
  "reasoning": "Brief explanation"
}}}}

═══════════════════════════════════════════════════════════════════════════════

**FINAL DECISION TREE (USE THIS):**

Start here and follow exactly:

1. **Does document have 5+ payroll indicators?**
   - Title says PAYROLL/PAYSLIP/SALARY REGISTER?
   - Shows employee ID, salary breakdown, deductions?
   - Period/month specified?
   - Internal document FOR {company_name} (not FROM a vendor)?
   YES → payroll + money_going_out | NO → Go to 2

2. **Does document have 3+ share document indicators?**
   - Share certificate, equity allocation, ESOP, dividend?
   YES → share_document + money_coming_in | NO → Go to 3

3. **Does document have 4+ bank statement indicators?**
   - Bank logo, account number, transaction list, statement period?
   YES → bank_statement + bank_statement | NO → Go to 4

4. **Does "{company_name}" appear in TO:/CUSTOMER:/RECEIVER:/BILL TO:/CLIENT: field?**
   YES → {company_name} is RECEIVING the document from a vendor
         → bill + money_going_out
         → STOP
   NO → Go to 5

5. **Does "{company_name}" appear in FROM:/VENDOR:/HEADER (as issuer) AND another company in TO:/CUSTOMER: field?**
   YES → {company_name} is ISSUING the document to a customer
         → invoice + money_coming_in
         → STOP
   NO → Go to 6

6. **Does the bank account for payment belong to "{company_name}"?**
   YES → {company_name} receives payment
         → invoice + money_coming_in
         → STOP
   NO → Go to 7

7. **Does the bank account for payment belong to another company?**
   YES → {company_name} must pay to that account
         → bill + money_going_out
         → STOP
   NO → Go to 8

8. **Cannot determine who issued the document or payment direction?**
   YES → null + illegible_document

═══════════════════════════════════════════════════════════════════════════════

⚠️ **PAYROLL CLASSIFICATION EXAMPLES:**

**Example 1: Multi-Employee Payroll Report (PAYROLL)**
Document: "PAYROLL ANALYSIS REPORT FOR COMPANY"
Header: "ENAMI LIMITED"
Template: "10U8 - ENAMI LTD"
Period: "202506 - JUNE"
Content: Table with employees U8003, U8004, U8005
Columns: SALARY, DEDUCTIONS, CONTRIBUTIONS, Total Earnings
Company Cost: 1,211.70

Classification:
- document_type = "payroll"
- category = "money_going_out"
- reasoning = "Payroll report for ENAMI LIMITED showing employee salaries for June 2025. Contains multiple employees (U8003, U8004, U8005) with salary breakdown, deductions, and company cost. This represents money going out to pay employees."

---

**Example 2: Single Employee Payslip (PAYROLL)**
Document: "PAYSLIP"
Header: "ENAMI LIMITED"
Employee: "John Doe (U8003)"
Period: "JUNE 2025"
Content: Salary: 750.00, Deductions: 85.68, Net Pay: 664.32
Columns: EARNINGS, DEDUCTIONS, NET PAY

Classification:
- document_type = "payroll"
- category = "money_going_out"
- reasoning = "Individual employee payslip for John Doe issued by ENAMI LIMITED for June 2025. Shows salary breakdown with earnings, deductions, and net pay. This represents money going out to pay the employee."

---

**Example 3: HR Vendor Invoice (BILL, not payroll)**
Document: "INVOICE from ABC HR Services"
FROM: ABC HR Services Pvt Ltd
TO: ENAMI LIMITED
For: Payroll processing services
Amount: $500

Classification:
- document_type = "bill"
- category = "money_going_out"
- reasoning = "ENAMI LIMITED is in the TO/CUSTOMER field. This is a vendor invoice for HR services, not an internal payroll report. ENAMI must pay ABC HR Services. Does not have payroll characteristics (no employee salary breakdown, no period, issued by external vendor)."

---

**Example 4: Contractor Payment Invoice (BILL, not payroll)**
Document: "INVOICE"
FROM: Freelance Consultant Ltd
TO: ENAMI LIMITED
For: Consulting services rendered
Amount: $2,000

Classification:
- document_type = "bill"
- category = "money_going_out"
- reasoning = "ENAMI LIMITED is in the TO/CUSTOMER field. This is payment to an external contractor/vendor, not an employee. Does not have payroll characteristics (no employee ID, no salary structure, no deductions like PF/ESI, no payroll period)."

═══════════════════════════════════════════════════════════════════════════════

⚠️ **REMEMBER:** 
- **Payroll = Employee salary documents (single OR multiple employees)** with salary structure, deductions, period → (payroll + money_going_out)
- **Vendor invoice = External party billing for services** → (bill + money_going_out)
- **If {company_name} is in CUSTOMER/TO/RECEIVER field** → They RECEIVED the document → bill + money_going_out
- **If {company_name} is in FROM/VENDOR/HEADER field** → They ISSUED the document → invoice + money_coming_in
- **Payroll reports are always money_going_out** (company paying employees)
- **Check ALL document type indicators first** before defaulting to invoice/bill classification
- **Document title alone is NOT reliable** - verify with structure and content"""

def generate_company_variations(company_name):
    """Generate common variations of company name for better matching"""
    variations = [company_name]
    
    # Remove common suffixes for matching
    suffixes = [
        ' Pvt Ltd', ' Private Limited', ' Pvt. Ltd.', ' Private Ltd',
        ' Ltd', ' Limited', ' LLC', ' Inc', ' Corp', ' Corporation',
        ' LLP', ' LP', ' PLC', ' Co.', ' Company', ' ENTERPRISES LIMITED',
        ' Enterprises Limited', ' ENTERPRISES LTD', ' Enterprises Ltd'
    ]
    
    name_without_suffix = company_name
    for suffix in suffixes:
        if company_name.upper().endswith(suffix.upper()):
            name_without_suffix = company_name[:len(company_name)-len(suffix)].strip()
            variations.append(name_without_suffix)
            break
    
    # Add common abbreviations
    if len(name_without_suffix.split()) > 1:
        words = name_without_suffix.split()
        acronym = ''.join([w[0].upper() for w in words if w])
        if len(acronym) > 1:
            variations.append(acronym)
    
    # Format variations as bullet list
    return '\n'.join([f"  - {var}" for var in set(variations)])

def download_from_s3(s3_key, bucket_name=None):
    """Download file from S3 using key"""
    try:
        if not bucket_name:
            bucket_name = os.getenv('S3_BUCKET_NAME', 'company-documents-2025')
        
        # Initialize S3 client
        aws_access_key = os.getenv('AWS_ACCESS_KEY_ID')
        aws_secret_key = os.getenv('AWS_SECRET_ACCESS_KEY')
        aws_region = os.getenv('AWS_REGION', 'eu-north-1')
        
        if aws_access_key and aws_secret_key:
            s3_client = boto3.client(
                's3',
                aws_access_key_id=aws_access_key,
                aws_secret_access_key=aws_secret_key,
                region_name=aws_region
            )
        else:
            s3_client = boto3.client('s3', region_name=aws_region)
        
        print(f"Downloading from bucket: {bucket_name}, key: {s3_key}")
        
        response = s3_client.get_object(Bucket=bucket_name, Key=s3_key)
        return response['Body'].read()
        
    except Exception as e:
        raise Exception(f"Error downloading from S3: {str(e)}")

def process_document_with_claude(pdf_content, company_name):
    """Process document with Claude and return classification"""
    try:
        # Initialize Anthropic client
        anthropic_client = anthropic.Anthropic(
            api_key=os.getenv('ANTHROPIC_API_KEY')
        )
        
        # Encode to base64
        pdf_base64 = base64.b64encode(pdf_content).decode('utf-8')
        
        # Get prompt
        prompt = get_classification_prompt(company_name)
        
        # Send to Claude
        message = anthropic_client.messages.create(
            model="claude-sonnet-4-20250514",
            max_tokens=2500,
            temperature=0,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "document",
                            "source": {
                                "type": "base64",
                                "media_type": "application/pdf",
                                "data": pdf_base64
                            }
                        },
                        {
                            "type": "text",
                            "text": prompt
                        }
                    ]
                }
            ]
        )
        
        # Extract response
        response_text = message.content[0].text.strip()
        
        print(f"Token usage - Input: {message.usage.input_tokens}, Output: {message.usage.output_tokens}")
        
        return {
            "success": True,
            "classification": response_text,
            "token_usage": {
                "input_tokens": message.usage.input_tokens,
                "output_tokens": message.usage.output_tokens
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

def main(data):
    """
    Main function for document classification
    """
    try:
        # Validate required fields
        if 'company_name' not in data:
            return {
                "success": False,
                "error": "company_name is required"
            }
            
        if 's3_key' not in data:
            return {
                "success": False,
                "error": "s3_key is required"
            }
        
        company_name = data['company_name']
        s3_key = data['s3_key']
        bucket_name = data.get('bucket_name')
        
        print(f"Processing document for company: {company_name}, S3 key: {s3_key}")
        
        # Download PDF from S3
        pdf_content = download_from_s3(s3_key, bucket_name)
        print(f"Downloaded PDF, size: {len(pdf_content)} bytes")
        
        # Process with Claude
        result = process_document_with_claude(pdf_content, company_name)
        
        if result["success"]:
            try:
                # Parse Claude's JSON response
                classification_data = json.loads(result["classification"])
                
                # CRITICAL: Post-processing validation and auto-correction
                validation_result = validate_and_correct_classification(
                    classification_data, 
                    company_name,
                    result["classification"]
                )
                
                if validation_result["corrected"]:
                    print(f"⚠️ AUTO-CORRECTED: {validation_result['correction_reason']}")
                    classification_data = validation_result["corrected_data"]
                
                if validation_result["warnings"]:
                    print(f"⚠️ Validation warnings: {validation_result['warnings']}")
                
                return {
                    "success": True,
                    "result": classification_data,
                    "metadata": {
                        "token_usage": result["token_usage"],
                        "s3_key": s3_key,
                        "company_name": company_name,
                        "validation": {
                            "corrected": validation_result["corrected"],
                            "correction_reason": validation_result.get("correction_reason"),
                            "warnings": validation_result.get("warnings")
                        }
                    }
                }
                
            except json.JSONDecodeError as e:
                return {
                    "success": False,
                    "error": "Claude returned invalid JSON",
                    "raw_response": result["classification"]
                }
        else:
            return {
                "success": False,
                "error": result["error"]
            }
            
    except Exception as e:
        print(f"Classification error: {str(e)}")
        return {
            "success": False,
            "error": f"Internal processing error: {str(e)}"
        }

def validate_and_correct_classification(classification_data, company_name, raw_response):
    """
    Validate classification and auto-correct obvious errors
    Returns dict with correction status and warnings
    """
    doc_type = classification_data.get("document_type")
    category = classification_data.get("category")
    reasoning = classification_data.get("reasoning", "").lower()
    
    corrected = False
    correction_reason = None
    warnings = []
    
    # CRITICAL CHECK 0: Payroll validation
    if doc_type == "payroll" and category != "money_going_out":
        classification_data["category"] = "money_going_out"
        classification_data["reasoning"] = "Auto-corrected: Payroll documents always represent money_going_out (company paying employees)"
        corrected = True
        correction_reason = "Payroll must be money_going_out"
    
    # Detect if reasoning mentions payroll but classified differently
    payroll_keywords = [
        "payroll", "salary register", "employee compensation", 
        "wage sheet", "salary analysis", "payroll report"
    ]
    
    is_payroll_in_reasoning = any(
        keyword in reasoning 
        for keyword in payroll_keywords
    )
    
    if is_payroll_in_reasoning and doc_type != "payroll":
        warnings.append("Reasoning mentions payroll but document type is not 'payroll'. Review recommended.")
    
    # CRITICAL CHECK 1: Detect reasoning contradictions
    # If reasoning says "must pay" or "customer" but classified as invoice
    customer_keywords = [
        "customer who must pay", f"{company_name.lower()}.*must pay", f"{company_name.lower()}.*customer",
        f"{company_name.lower()}.*receiver", f"{company_name.lower()}.*client", "receiving this invoice",
        f"{company_name.lower()}.*are the customer", "pay this invoice"
    ]
    
    is_customer_in_reasoning = any(
        re.search(pattern, reasoning, re.IGNORECASE) 
        for pattern in customer_keywords
    )
    
    if is_customer_in_reasoning and (doc_type == "invoice" or category == "money_coming_in"):
        # CRITICAL ERROR: Reasoning says customer but classified as invoice
        classification_data["document_type"] = "bill"
        classification_data["category"] = "money_going_out"
        classification_data["reasoning"] = (
            f"CORRECTED: {company_name} is the CUSTOMER/RECEIVER, "
            "therefore they must PAY. This is a bill, not an invoice."
        )
        corrected = True
        correction_reason = "Reasoning indicated customer role but was classified as invoice"
    
    # CRITICAL CHECK 2: Logical consistency rules
    if doc_type == "share_document" and category != "money_coming_in":
        classification_data["category"] = "money_coming_in"
        classification_data["reasoning"] = "Auto-corrected: Share documents always represent money_coming_in"
        corrected = True
        correction_reason = "Share document must be money_coming_in"
    
    if doc_type == "invoice" and category != "money_coming_in":
        classification_data["category"] = "money_coming_in"
        corrected = True
        correction_reason = "Invoice must be money_coming_in"
        warnings.append("Invoice was incorrectly categorized")
    
    if doc_type == "bill" and category != "money_going_out":
        classification_data["category"] = "money_going_out"
        corrected = True
        correction_reason = "Bill must be money_going_out"
        warnings.append("Bill was incorrectly categorized")
    
    # CRITICAL CHECK 3: Category-to-type consistency
    if category == "money_coming_in" and doc_type not in ["invoice", "share_document", "bank_statement"]:
        if doc_type == "bill":
            # This is a critical error - bill cannot be money_coming_in
            classification_data["category"] = "money_going_out"
            corrected = True
            correction_reason = "Bill cannot be money_coming_in, corrected to money_going_out"
        elif doc_type == "payroll":
            # CRITICAL: payroll can NEVER be money_coming_in
            classification_data["category"] = "money_going_out"
            corrected = True
            correction_reason = "Payroll can NEVER be money_coming_in"
        else:
            warnings.append(f"Inconsistent: category='money_coming_in' but document_type='{doc_type}'")
    
    if category == "money_going_out" and doc_type not in ["bill", "payroll", "bank_statement"]:
        if doc_type == "invoice":
            # Critical error - invoice cannot be money_going_out
            classification_data["category"] = "money_coming_in"
            corrected = True
            correction_reason = "Invoice cannot be money_going_out, corrected to money_coming_in"
        elif doc_type == "share_document":
            # CRITICAL: share_document can NEVER be money_going_out
            classification_data["category"] = "money_coming_in"
            corrected = True
            correction_reason = "Share document can NEVER be money_going_out"
        else:
            warnings.append(f"Inconsistent: category='money_going_out' but document_type='{doc_type}'")
    
    # Check confidence score
    confidence = classification_data.get("confidence_score", 1.0)
    if confidence < 0.6:
        warnings.append(f"Low confidence ({confidence}). Manual review recommended.")
    
    return {
        "corrected": corrected,
        "correction_reason": correction_reason,
        "warnings": " | ".join(warnings) if warnings else None,
        "corrected_data": classification_data if corrected else None
    }

def health_check():
    """Health check for the classification service"""
    try:
        required_vars = ['ANTHROPIC_API_KEY']
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            return {
                "healthy": False,
                "error": f"Missing environment variables: {', '.join(missing_vars)}"
            }
        
        return {
            "healthy": True,
            "service": "claude-document-classification",
            "version": "4.0-payroll-support",
            "supported_types": ["payroll", "invoice", "bill", "share_document", "bank_statement"],
            "anthropic_configured": bool(os.getenv('ANTHROPIC_API_KEY')),
            "aws_configured": bool(os.getenv('AWS_ACCESS_KEY_ID') and os.getenv('AWS_SECRET_ACCESS_KEY')),
            "s3_bucket": os.getenv('S3_BUCKET_NAME', 'company-documents-2025')
        }
        
    except Exception as e:
        return {
            "healthy": False,
            "error": str(e)
        }